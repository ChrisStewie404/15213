#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# count = 0;
	xorq %rax, %rax
	iaddq $-5, %rdx
	jle s1
L6:
	mrmovq (%rdi), %r8	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle n1
	iaddq $1,%rax 		# count++
n1:
	mrmovq 8(%rdi), %r9	# read val from src...
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle n2
	iaddq $1,%rax 		# count++
n2:
	mrmovq 0x10(%rdi), %r10	# read val from src...
	rmmovq %r10, 0x10(%rsi)	# ...and store it to dst
	andq %r10, %r10			# val <= 0?
	jle n3
	iaddq $1,%rax 			# count++
n3:
	mrmovq 0x18(%rdi), %r11	# read val from src...
	rmmovq %r11, 0x18(%rsi)	# ...and store it to dst
	andq %r11, %r11			# val <= 0?
	jle n4
	iaddq $1,%rax 			# count++
n4:
	mrmovq 0x20(%rdi), %r12	# read val from src...
	rmmovq %r12, 0x20(%rsi)	# ...and store it to dst
	andq %r12, %r12			# val <= 0?
	jle n5
	iaddq $1,%rax # count++
n5:
	mrmovq 0x28(%rdi), %r13	# read val from src...
	rmmovq %r13, 0x28(%rsi)	# ...and store it to dst
	andq %r13, %r13			# val <= 0?
	jle n6
	iaddq $1,%rax 			# count++
n6:
	iaddq $0x30, %rdi
	iaddq $0x30, %rsi
	iaddq $-6, %rdx
	jg L6
s1:
	iaddq $5, %rdx
	jle Done
L1:
	mrmovq (%rdi), %r8# read val from src...
	rmmovq %r8, (%rsi)# ...and store it to dst
	andq %r8, %r8# val <= 0?
	jle o1
	iaddq $1,%rax # count++
o1:
	iaddq $8, %rdi
	iaddq $8, %rsi
	iaddq $-1, %rdx
	jg L1
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
